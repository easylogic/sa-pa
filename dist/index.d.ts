declare var _default: {
    registElement: typeof registElement;
    normalizeWheelEvent(e: any): number[];
    MAGIC_METHOD: "@magic:";
    makeEventChecker: (value: any, split?: string) => string;
    CHECK_DOM_EVENT_PATTERN: RegExp;
    CHECK_LOAD_PATTERN: RegExp;
    CHECK_BIND_PATTERN: RegExp;
    CHECK_SUBSCRIBE_PATTERN: RegExp;
    PIPE: (...args: any[]) => string;
    NAME_SAPARATOR: ":";
    CHECK_SAPARATOR: "|";
    DOM_EVENT_SAPARATOR: string;
    LOAD_SAPARATOR: string;
    BIND_SAPARATOR: string;
    SUBSCRIBE_SAPARATOR: string;
    SAPARATOR: " ";
    CHECKER: (value: any, split?: string) => string;
    AFTER: (value: any, split?: string) => string;
    BEFORE: (value: any, split?: string) => string;
    IF: (value: any, split?: string) => string;
    KEY: (value: any, split?: string) => string;
    ARROW_UP: string;
    ARROW_DOWN: string;
    ARROW_LEFT: string;
    ARROW_RIGHT: string;
    ENTER: string;
    SPACE: string;
    ESCAPE: string;
    ALT: string;
    SHIFT: string;
    META: string;
    CONTROL: string;
    MOUSE: string;
    TOUCH: string;
    PEN: string;
    SELF: string;
    LEFT_BUTTON: string;
    RIGHT_BUTTON: string;
    FIT: string;
    PASSIVE: string;
    DOMDIFF: string;
    DEBOUNCE: (t?: number) => string;
    DELAY: (t?: number) => string;
    D1000: string;
    THROTTLE: (t?: number) => string;
    ALL_TRIGGER: string;
    SELF_TRIGGER: string;
    CAPTURE: string;
    PREVENT: string;
    STOP: string;
    SUBSCRIBE: (...args: any[]) => string;
    SUBSCRIBE_ALL: (...args: any[]) => string;
    SUBSCRIBE_SELF: (...args: any[]) => string;
    CONFIG: (config: any, ...args: any[]) => string;
    CUSTOM: (...keys: any[]) => (...args: any[]) => string;
    CLICK: (...args: any[]) => string;
    DOUBLECLICK: (...args: any[]) => string;
    MOUSEDOWN: (...args: any[]) => string;
    MOUSEUP: (...args: any[]) => string;
    MOUSEMOVE: (...args: any[]) => string;
    MOUSEOVER: (...args: any[]) => string;
    MOUSEOUT: (...args: any[]) => string;
    MOUSEENTER: (...args: any[]) => string;
    MOUSELEAVE: (...args: any[]) => string;
    TOUCHSTART: (...args: any[]) => string;
    TOUCHMOVE: (...args: any[]) => string;
    TOUCHEND: (...args: any[]) => string;
    KEYDOWN: (...args: any[]) => string;
    KEYUP: (...args: any[]) => string;
    KEYPRESS: (...args: any[]) => string;
    DRAG: (...args: any[]) => string;
    DRAGSTART: (...args: any[]) => string;
    DROP: (...args: any[]) => string;
    DRAGOVER: (...args: any[]) => string;
    DRAGENTER: (...args: any[]) => string;
    DRAGLEAVE: (...args: any[]) => string;
    DRAGEXIT: (...args: any[]) => string;
    DRAGOUT: (...args: any[]) => string;
    DRAGEND: (...args: any[]) => string;
    CONTEXTMENU: (...args: any[]) => string;
    CHANGE: (...args: any[]) => string;
    INPUT: (...args: any[]) => string;
    FOCUS: (...args: any[]) => string;
    FOCUSIN: (...args: any[]) => string;
    FOCUSOUT: (...args: any[]) => string;
    BLUR: (...args: any[]) => string;
    PASTE: (...args: any[]) => string;
    RESIZE: (...args: any[]) => string;
    SCROLL: (...args: any[]) => string;
    SUBMIT: (...args: any[]) => string;
    POINTERSTART: (...args: any[]) => string;
    POINTEROVER: (...args: any[]) => string;
    POINTERENTER: (...args: any[]) => string;
    POINTEROUT: (...args: any[]) => string;
    POINTERMOVE: (...args: any[]) => string;
    POINTEREND: (...args: any[]) => string;
    CHANGEINPUT: (...args: any[]) => string;
    WHEEL: (...args: any[]) => string;
    ANIMATIONSTART: (...args: any[]) => string;
    ANIMATIONEND: (...args: any[]) => string;
    ANIMATIONITERATION: (...args: any[]) => string;
    TRANSITIONSTART: (...args: any[]) => string;
    TRANSITIONEND: (...args: any[]) => string;
    TRANSITIONRUN: (...args: any[]) => string;
    TRANSITIONCANCEL: (...args: any[]) => string;
    DOUBLETAB: (...args: any[]) => string;
    LOAD: (value?: string) => string;
    getRef: (id: any) => any;
    BIND_CHECK_FUNCTION: (field: any) => () => boolean;
    BIND_CHECK_DEFAULT_FUNCTION: () => boolean;
    BIND: (value?: string) => string;
    default: {
        addDomEvent(dom: any, eventName: any, callback: any, useCapture?: boolean): void;
        removeDomEvent(dom: any, eventName: any, callback: any): void;
        pos(e: any): any;
        posXY(e: any): {
            x: any;
            y: any;
        };
    };
    start: (ElementClass: UIElement, opt?: {
        container: string | HTMLElement;
    }) => UIElement;
    UIElement: typeof UIElement;
    BaseStore: typeof BaseStore;
    Dom: typeof Dom;
};
export default _default;
import { registElement } from "./functions/registElement";
import UIElement from "./UIElement";
import BaseStore from "./BaseStore";
import Dom from "./functions/Dom";
